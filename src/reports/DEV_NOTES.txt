> You should use InputRef to be able to reference and get the value of TextField. 
Also you need to use "current" to be able get the referenced TextField.

> I created a main ReportApp.js and applied Routers, Route, SWitch, navigation components
in this file. Switch is required to prevent React uploading a page (component) under another.
I used Lİnks with Buttons to visit the paths created with Route component.

> I deleted useCallbacks with onChange methods inside TextField in upload page. Because it was making the 
page very slow. I used refs to get the vlaue from the TextField and changed the title and description with this
value. I changed the vlaues in onAddReport callback and created the item inside useEffect. Otherwise it changes
title and description but using the one former vlaues of these variables.

> setState() methods are asynchrounous which means they are not guaranteed to run when a button click. 
This is why I put setState() methods inside onclick handler and then put the code block which I use the
updated value inside an UseEffect callback which fires when there is a change in the variable we track.

> React Helmet plugin is used to change titles of individual pages. If you just want to make the title
of al pages same you could just change it inside html file.

> You can make whole card clickable with CardActionArea tag in Material UI

> To override styles of Material UI components:
    1) Create useStyle const with makeStyle() method
    2) Inside this method implement the exact same structure of Css styling. You can check Material UI 
    component source code for exact style. And change values according to your needs.
    3) Inside main function create classes const assigning useStyle()
    4) Inside MAterial UI component tag put className attribute with the created classes and use dot notation 
    to apply the style. Example: className={cardContentClasses.cardcontent}

> To have Material UI TextField validation you make TExtField outline red. Also you can add helpertext message
to tell about the problem.
    1) create error boolean const with useState().
    2) create ref for TextField with useRef().
    3) add error attribute to TextField component tag and assign it to the error const created.
    4) change error const value using related setter method in the code blocks necessary (in UseEffects etc).
    5) Most often you need error message, you can follow the same steps above to change the helpertext 
    shown below TextField for error messages ina ccordindance with showing error. (attribute helpertext)

> We can do Initial page loads with useEffect & useState. Exmple code below:

    const [isInitialPageLoad, setIsInitialPageLoad] = useState(true);

    if (isInitialPageLoad) {
        setIsInitialPageLoad(false);
    } else {
        setIsError(true);
        setNewHelperText("Arama kısmı boş."); 
    }

> We use Promises to be able to call .then() chain methods. Example of Promise function below:
    function setTitle() {
      return new Promise((resolve, reject) => {
        setNewReportTitle(reportTitleTextfieldRef.current.value);
        resolve(newReportTitle);
      })
    }

    // usage
    setTitle().then((title) => {

    });

> WhenI put type="submit" attriute to a button, ENTER key functions as Click on this button.
This also solved the back button not going back to the previoud page???

> I solved internet connection error handling with adding a div (class: error_div) in ReportSearchPage.js 
and use catch after .then() method where I call axios.get(). and changed the text inside the div via useState.

> To stop a functional component to re-render you can wrap it with React.memo(). So if its input values are 
not changed then it will not re-render itself when state changes. It should a seperate functional component in
a seperate .js file. And it should have inputs for it to work. I used React.memo() example in ReportList.js